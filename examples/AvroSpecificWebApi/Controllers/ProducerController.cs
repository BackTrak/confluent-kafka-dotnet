using AvroSpecificWebApi.Entities;
using Confluent.Kafka;
using Confluent.SchemaRegistry;
using Confluent.SchemaRegistry.Serdes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;

namespace AvroSpecificWebApi.Controllers
{
    public class ProducerController : ApiController
    {
        // Note: WebApi and MVC controller methods that use Confluent.Kafka MUST use the async. 
        // Using .Result or .GetAwaiter().GetResult() will cause your application to hang. 
        public async Task<string> Post([FromBody]Entities.Producer producerSettings)
        {
            var producerConfig = new ProducerConfig
            {
                BootstrapServers = producerSettings.BootstrapServers
            };

            var schemaRegistryConfig = new SchemaRegistryConfig
            {
                // Note: you can specify more than one schema registry url using the
                // schema.registry.url property for redundancy (comma separated list). 
                // The property name is not plural to follow the convention set by
                // the Java implementation.
                SchemaRegistryUrl = producerSettings.SchemaRegistryUrl,
                // optional schema registry client properties:
                SchemaRegistryRequestTimeoutMs = 5000,
                SchemaRegistryMaxCachedSchemas = 10
            };

            var consumerConfig = new ConsumerConfig
            {
                BootstrapServers = producerSettings.BootstrapServers,
                GroupId = "avro-specific-example-group"
            };

            var avroSerializerConfig = new AvroSerializerConfig
            {
                // optional Avro serializer properties:
                BufferBytes = 100,
                AutoRegisterSchemas = true
            };

            // Note: The User class in this project was generated using the Confluent fork of the avrogen.exe tool 
            // (avaliable from: https://github.com/confluentinc/avro/tree/confluent-fork) which includes modifications
            // that prevent namespace clashes with user namespaces that include the identifier 'Avro'. AvroSerializer
            // and AvroDeserializer are also compatible with classes generated by the official avrogen.exe tool 
            // (available from: https://github.com/apache/avro), with the above limitation.
            
            using (var schemaRegistry = new CachedSchemaRegistryClient(schemaRegistryConfig))
            using (var producer =
                new ProducerBuilder<string, Entities.User>(producerConfig)
                    .SetKeySerializer(new AvroSerializer<string>(schemaRegistry))
                    .SetValueSerializer(new AvroSerializer<User>(schemaRegistry))
                    .Build())
            {
                Console.WriteLine($"{producer.Name} producing on {producerSettings.TopicName}. Enter user names, q to exit.");
                
                User user = new User { name = "Test User Name", favorite_color = "Green", favorite_number = 42 };

                return await producer
                    .ProduceAsync(producerSettings.TopicName, new Message<string, User> { Key = user.name, Value = user })
                    .ContinueWith(task => task.IsFaulted
                        ? $"error producing message: {task.Exception.Message}"
                        : $"produced to: {task.Result.TopicPartitionOffset}");
            }
        }
    }
}
